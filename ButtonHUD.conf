name: ButtonsHud - Dimencia and Archaegeo v1.00 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=980 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=980 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        opacityTop = 0.1 --export: 0 to 1 for opacity of AH top half, default 0.1
        opacityBottom = 0.3 --export: 0 to 1 for opacity of AH bottom, default 0.3
        circleRad = 400 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=1.00;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;APThrottleSet=false;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;CoreAltitude=core.getAltitude()AntigravTargetAltitude=CoreAltitude;ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;local m={}local n=""local o=true;local p={}local q=2560;local r=1440;local s=nil;local t=nil;local u=nil;local v=nil;local w=false;local x=false;local y=0;local z=nil;local A={}local B={}local C={}local D=0;local E=false;local F={}local G={}local H=a(1/apTickRate)*2;local I={}local J={}local K={}local L={}local M=false;local N=0;local O=k()local P=16;local Q=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","opacityBottom","opacityTop","RemoteHud"}AutoVariables={"EmergencyWarp","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LastMaxBrakeInAtmo","AntigravTargetAltitude"}if dbHud then local R=dbHud.hasKey;if not useTheseSettings then for S,T in pairs(SaveableVariables)do if R(T)then local U=c(dbHud.getStringValue(T))if U~=nil then system.print(T.." "..dbHud.getStringValue(T))_G[T]=U;w=true end end end end;for S,T in pairs(AutoVariables)do if R(T)then local U=c(dbHud.getStringValue(T))if U~=nil then system.print(T.." "..dbHud.getStringValue(T))_G[T]=U;w=true end end end;if useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif w then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;N=O-updateMass()if antigrav then if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local V=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for S in pairs(ElementsID)do local W=h(ElementsID[S])if W=="landing gear"then HasGear=true end;if W=="dynamic core"then local X=e(ElementsID[S])if X>10000 then P=128 elseif X>1000 then P=64 elseif X>150 then P=32 end end;D=D+e(ElementsID[S])if fuelX~=0 and fuelY~=0 then if W=="atmospheric fuel-tank"or W=="space fuel-tank"or W=="rocket fuel-tank"then local X=e(ElementsID[S])local Y=j(ElementsID[S])local Z=0;local a0=system.getTime()if W=="atmospheric fuel-tank"then local a1=400;local a2=35.03;if X>10000 then a1=51200;a2=5480 elseif X>1300 then a1=6400;a2=988.67 elseif X>150 then a1=1600;a2=182.67 end;Z=Y-a2;if fuelTankHandlingAtmo>0 then a1=a1+a1*fuelTankHandlingAtmo*0.2 end;if Z>a1 then a1=Z end;A[#A+1]={ElementsID[S],core.getElementNameById(ElementsID[S]),a1,a2,Z,a0}end;if W=="rocket fuel-tank"then local a1=320;local a2=173.42;if X>65000 then a1=40000;a2=25740 elseif X>6000 then a1=5120;a2=4720 elseif X>700 then a1=640;a2=886.72 end;Z=Y-a2;if fuelTankHandlingRocket>0 then a1=a1+a1*fuelTankHandlingRocket*0.2 end;if Z>a1 then a1=Z end;C[#C+1]={ElementsID[S],core.getElementNameById(ElementsID[S]),a1,a2,Z,a0}end;if W=="space fuel-tank"then local a1=2400;local a2=182.67;if X>10000 then a1=76800;a2=5480 elseif X>1300 then a1=9600;a2=988.67 end;Z=Y-a2;if fuelTankHandlingSpace>0 then a1=a1+a1*fuelTankHandlingSpace*0.2 end;if Z>a1 then a1=Z end;B[#B+1]={ElementsID[S],core.getElementNameById(ElementsID[S]),a1,a2,Z,a0}end end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,T in pairs(door)do T.deactivate()end end;if forcefield then for _,T in pairs(forcefield)do T.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if f()>0 and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a3,a4)if a3==nil then a3=core.g()end;a3=round(a3,5)if a4~=nil and a4 or(z==nil or z~=a3)then local a5=c(unit.getData()).maxBrake;if a5~=nil then LastMaxBrake=a5 end;if f()>0 then LastMaxBrakeInAtmo=a5 end;z=a3 end end;function MakeButton(a6,a7,a8,a9,aa,ab,ac,ad,ae)local af={enableName=a6,disableName=a7,width=a8,height=a9,x=aa,y=ab,toggleVar=ac,toggleFunction=ad,drawCondition=ae,hovered=false}table.insert(p,af)return af end;function UpdateAtlasLocationsList()AtlasOrdered={}for S,T in pairs(atlas[0])do table.insert(AtlasOrdered,{name=T.name,index=S})end;local function ag(ah,ai)return ah.name<ai.name end;table.sort(AtlasOrdered,ag)end;function DrawDeadZone(aj)aj[#aj+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if o then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;o=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;o=true end end;function SetupInterplanetaryPanel()InAtmo=f()>0;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ak,al,aa,ab,a8,a9)if ak>aa and ak<aa+a8 and al>ab and al<ab+a9 then return true else return false end end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(aj)local am=0;local an=vec3(velocity):len()n=""currentConstructMass=k()local ao=D;local ap=0;local aq=0;local ar=0;local as=0;local at=""for S in pairs(ElementsID)do local X=0;local au=0;au=e(ElementsID[S])X=g(ElementsID[S])ap=ap+X;if X<au then if X==0 then ar=ar+1 else aq=aq+1 end;if E and#m==0 then position=vec3(core.getElementPositionById(ElementsID[S]))local aa=position.x-P;local ab=position.y-P;local av=position.z-P;table.insert(m,core.spawnArrowSticker(aa,ab,av+1,"down"))table.insert(m,core.spawnArrowSticker(aa,ab,av+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(aa+1,ab,av,"north"))table.insert(m,core.spawnArrowSticker(aa+1,ab,av,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(aa-1,ab,av,"south"))table.insert(m,core.spawnArrowSticker(aa-1,ab,av,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(aa,ab-1,av,"east"))table.insert(m,core.spawnArrowSticker(aa,ab-1,av,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(aa,ab+1,av,"west"))table.insert(m,core.spawnArrowSticker(aa,ab+1,av,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[S])end elseif E and#m>0 and m[11]==ElementsID[S]then for aw in pairs(m)do core.deleteSticker(m[aw])end;m={}end end;am=a(ap/ao*100)if an<5 and currentConstructMass<O then voxelDam=math.ceil((currentConstructMass-updateMass())/N*100)O=currentConstructMass end;if am<100 then aj[#aj+1]=[[<g class="pbright txt">]]as=a(am*2.55)at=b("rgb(%d,%d,%d)",255-as,as,0)if am<100 then aj[#aj+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],at,am)if ar>0 then aj[#aj+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],at,ar,aq)elseif aq>0 then aj[#aj+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],at,aq)end end;aj[#aj+1]=[[<\g>]]end end;function DrawCursorLine(aj)local ax=a(utils.clamp(Distance/(q/4)*255,0,255))aj[#aj+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+ax,a(PrimaryG+0.5)-ax,a(PrimaryB+0.5)-ax)end;function getPitch(ay,az,ai)local aA=ay:cross(ai):normalize_inplace()local aB=math.acos(utils.clamp(aA:dot(-az),-1,1))*constants.rad2deg;if aA:cross(-az):dot(ai)<0 then aB=-aB end;return aB end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 else if x then for S,T in pairs(SaveableVariables)do dbHud.setStringValue(T,d(nil))end;for S,T in pairs(AutoVariables)do if T~="SavedLocations"then dbHud.setStringValue(T,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;x=false;w=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe of ALL data"x=true end end end;function CheckButtons()for _,T in pairs(p)do if T.hovered then if not T.drawCondition or T.drawCondition()then T.toggleFunction()end;T.hovered=false end end end;function SetButtonContains()local aa=SimulatedX+q/2;local ab=SimulatedY+r/2;for _,T in pairs(p)do T.hovered=Contains(aa,ab,T.x,T.y,T.width,T.height)end end;function DrawButton(aj,aC,hover,aa,ab,aD,aE,aF,aG,aH,aI)if type(aH)=="function"then aH=aH()end;if type(aI)=="function"then aI=aI()end;aj[#aj+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",aa,ab,aD,aE)if aC then aj[#aj+1]=b("%s'",aF)else aj[#aj+1]=aG end;if hover then aj[#aj+1]=" style='stroke:white; stroke-width:2'"else aj[#aj+1]=" style='stroke:black; stroke-width:1'"end;aj[#aj+1]="></rect>"aj[#aj+1]=b("<text x='%f' y='%f' font-size='24' fill='",aa+aD/2,ab+aE/2+5)if aC then aj[#aj+1]="black"else aj[#aj+1]="white"end;aj[#aj+1]="' text-anchor='middle' font-family='Montserrat'>"if aC then aj[#aj+1]=b("%s</text>",aH)else aj[#aj+1]=b("%s</text>",aI)end end;function DrawButtons(aj)local aJ="rgb(50,50,50)'"local aK="rgb(210,200,200)"local aL=DrawButton;for _,T in pairs(p)do local a7=T.disableName;local a6=T.enableName;if type(a7)=="function"then a7=a7()end;if type(a6)=="function"then a6=a6()end;if not T.drawCondition or T.drawCondition()then aL(aj,T.toggleVar(),T.hovered,T.x,T.y,T.width,T.height,aK,aJ,a7,a6)end end end;function DrawTank(aj,M,aa,aM,aN,aO,aP,aQ)local aR=1;local aS=2;local aT=3;local aU=4;local aV=5;local aW=6;local aX=""local aY=0;local aZ=fuelY;local a_=fuelY+10;if l()==1 and not RemoteHud then aZ=aZ-50;a_=a_-50 end;aj[#aj+1]=[[<g class="pdim txtfuel">]]if aN=="ATMO"then aX="atmofueltank"elseif aN=="SPACE"then aX="spacefueltank"else aX="rocketfueltank"end;aY=_G[aX.."_size"]if#aO>0 then for i=1,#aO do local W=string.sub(aO[i][aS],1,12)local b0=0;for aw=1,aY do if aO[i][aS]==json.decode(unit[aX.."_"..aw].getData()).name then b0=aw;break end end;if M or aP[i]==nil or aQ[i]==nil then local b1=0;local b2=0;local b3=0;local b4=0;local a0=system.getTime()if b0~=0 then aQ[i]=json.decode(unit[aX.."_"..b0].getData()).percentage;aP[i]=json.decode(unit[aX.."_"..b0].getData()).timeLeft;if aP[i]=="n/a"then aP[i]=0 end else b3=j(aO[i][aR])-aO[i][aU]b1=aO[i][aT]aQ[i]=a(0.5+b3*100/b1)b2=aO[i][aV]b4=aO[i][aW]if b2<=b3 then aP[i]=0 else aP[i]=a(0.5+b3/((b2-b3)/(a0-b4)))end;aO[i][aV]=b3;aO[i][aW]=a0 end end;if W==aM then W=b("%s %d",aN,i)end;if b0==0 then W=W.." *"end;local b5;if aP[i]==0 then b5="n/a"else b5=FormatTimeString(aP[i])end;if aQ[i]~=nil then local as=a(aQ[i]*2.55)local at=b("rgb(%d,%d,%d)",255-as,as,0)local b6=""if b5~="n/a"and aP[i]<120 or aQ[i]<5 then if M then b6=[[class="red"]]end end;aj[#aj+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],aa,aZ,b6,W,aa,a_,at,aQ[i],b5)aZ=aZ+30;a_=a_+30 end end end;aj[#aj+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aB=-math.deg(math.atan(velocity.y,velocity.z))+180;aB=aB-90;if aB<0 then aB=360+aB end;if aB>180 then aB=-180+aB-180 end;return-aB end;function getRelativeYaw(velocity)velocity=vec3(velocity)local b7=math.deg(math.atan(velocity.y,velocity.x))-90;if b7<-180 then b7=360+b7 end;return b7 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local b8=50;local b9=260;local ba=MakeButton("Enable Brake Toggle","Disable Brake Toggle",b9,b8,q/2-b9/2,r/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)b8=60;b9=300;local aa=10;local ab=r/2-300;ab=ab+b8+20;MakeButton("Show Orbit Display","Hide Orbit Display",b9,b8,aa,ab,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)ab=ab+b8+20;MakeButton("Enable Repair Arrows","Disable Repair Arrows",b9,b8,aa+b9+20,ab,function()return E end,function()E=not E;if E then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)ab=ab+b8+20;MakeButton("Enable AGG","Disable AGG",b9,b8,aa,ab,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)ab=ab+b8+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,b9*2,b8,aa,ab,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(aj)local bb=CoreAltitude;local velocity=core.getVelocity()local an=vec3(velocity):len()local bc=vec3(core.getWorldVertical())local bd=vec3(core.getConstructWorldOrientationForward())local be=vec3(core.getConstructWorldOrientationRight())local aB=getPitch(bc,bd,be)local bf=getRoll(bc,bd,be)local bg=bf;local bh=aB;local bi=f()local bj=a(unit.getThrottle())local bk=an*3.6;local bl=unit.getAxisCommandValue(0)local bm=GetFlightStyle()local bn="ROLL"local bo=unit.getClosestPlanetInfluence()>0;if not bo then if an>5 then aB=getRelativePitch(velocity)bf=getRelativeYaw(velocity)else aB=0;bf=0 end;bn="YAW"end;aj[#aj+1]=LastOdometerOutput;aj[#aj+1]=n;aj[#aj+1]=RadarMessage;if Q%H==0 then M=true end;if fuelX~=0 and fuelY~=0 then DrawTank(aj,M,fuelX,"Atmospheric ","ATMO",A,K,L)DrawTank(aj,M,fuelX+100,"Space fuel t","SPACE",B,I,J)DrawTank(aj,M,fuelX+200,"Rocket fuel ","ROCKET",C,F,G)end;if M then M=false;Q=0 end;Q=Q+1;DrawVerticalSpeed(aj,bb,bi)if l()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if bo then DrawRollLines(aj,centerX,centerY,bg,bn,bo)DrawArtificialHorizon(aj,bh,bg,bi,centerX,centerY,bo)DrawAltitudeDisplay(aj,bb,bi)else DrawRollLines(aj,centerX,centerY,bf,bn,bo)DrawArtificialHorizon(aj,aB,bf,bi,centerX,centerY,bo)end;DrawPrograde(aj,bi,velocity,an,centerX,centerY)end end;DrawThrottle(aj,bm,bj,bl)DrawSpeed(aj,bk)DrawWarnings(aj)DisplayOrbitScreen(aj)if screen_2 then local bp=vec3(core.getConstructWorldPos())local aa=960+bp.x/MapXRatio;local ab=450+bp.y/MapYRatio;screen_2.moveContent(YouAreHere,(aa-80)/19.2,(ab-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(aj)local bq=rgb;local br=V;local bs=rgb;local bt=V;if IsInFreeLook()and not brightHud then bq=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]br=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;aj[#aj+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:%f;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:%f;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bq,bq,bs,bs,br,br,bt,bt,opacityTop,opacityBottom)end;function HUDEpilogue(aj)aj[#aj+1]="</svg>"end;function DrawSpeed(aj,bk)local bu=throtPosY-10;local bv=throtPosX+10;aj[#aj+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bu=75 end;aj[#aj+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bv,bu,a(bk))end;function DrawOdometer(aj,TotalDistanceTrip,TotalDistanceTravelled,bm,bw)local bx=1240;local by=55;local bz=65;local bi=f()local a3=core.g()local bA=0;local bB=0;refreshLastMaxBrake(a3)maxThrust=Nav:maxForceForward()y=k()local bC=vec3(core.getWorldAcceleration()):len()/9.80665;if a3>0.1 then bB=y*a3;bA=maxThrust/a3 end;aj[#aj+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bx=1120;by=55;bz=65 elseif bi>0 then aj[#aj+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bi)end;aj[#aj+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bx,by,bx,bz,a3/9.80665,bx,by+20,bx,bz+20,bC)aj[#aj+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 or RemoteHud then aj[#aj+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="190">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bw),FormatTimeString(TotalFlightTime),y/1000,LastMaxBrake/1000,maxThrust/1000,bm)if a3>0.1 then aj[#aj+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bA/1000,bB/1000)else aj[#aj+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else aj[#aj+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bm)end;aj[#aj+1]="</g>"end;function DrawThrottle(aj,bm,bj,bl)local aZ=throtPosY+10;local a_=throtPosY+20;if l()==1 and not RemoteHud then aZ=55;a_=65 end;local bD="CRUISE"local unit="km/h"local bE=bl;if bm=="TRAVEL"or bm=="AUTOPILOT"then bD="THROT"unit="%"bE=bj;local bF="dim"if bj<0 then bF="red"end;aj[#aj+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bF,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(bj),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;aj[#aj+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,aZ,bD,throtPosX+10,a_,bE,unit)end;function DrawVerticalSpeed(aj,bb,bi)if bb<200000 and bi==0 or bb and bi>0 then local velocity=vec3(core.getWorldVelocity())local bG=vec3(core.getWorldVertical())*-1;local bH=velocity.x*bG.x+velocity.y*bG.y+velocity.z*bG.z;local bI=0;if math.abs(bH)>1 then bI=45*math.log(math.abs(bH),10)if bH<0 then bI=-bI end end;aj[#aj+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bH),a(bI))end end;function getHeading(az)local bG=-vec3(core.getWorldVertical())az=az-az:project_on(bG)local bJ=vec3(0,0,1)bJ=bJ-bJ:project_on(bG)local bK=bJ:cross(bG)local bI=bJ:angle_between(az)*constants.rad2deg;if az:dot(bK)<0 then bI=360-bI end;return bI end;function DrawRollLines(aj,centerX,centerY,bg,bn,bo)local bL=circleRad;local bM=20;bM=math.floor(bM)local bN=a(bg)if bo then for i=-45,45,5 do local bO=i;aj[#aj+1]=b([[<g transform="rotate(%f,%d,%d)">]],bO,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;aj[#aj+1]=b([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+bL+bM-len,centerX,centerY+bL+bM)end;aj[#aj+1]=b([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+bL+bM-35,bn,centerX,centerY+bL+bM-25,bN)aj[#aj+1]=b([[<g transform="rotate(%f,%d,%d)">]],-bg,centerX,centerY)aj[#aj+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+bL+bM-20,centerX+5,centerY+bL+bM-20,centerX,centerY+bL+bM-15)aj[#aj+1]="</g>"end;local b7=bN;if bo then b7=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local bP=20;local bQ=a(b7)local bR=0;local bS=centerY+bL+bM+20;local bT=centerX;if bn~="YAW"then bS=130;bT=960 end;local bU=[[<path class="txttick line" d="]]for i=a(bQ-(bP+10)-bQ%5+0.5),a(bQ+bP+10+bQ%5+0.5),5 do local aa=bT+-i*5+b7*5;if i%10==0 then bR=10;local bV=i;if bV==360 then bV=0 elseif bV>360 then bV=bV-360 elseif bV<0 then bV=bV+360 end;aj[#aj+1]=b([[
                                    <text x="%f" y="%f">%d</text>]],aa+5,bS-12,bV)elseif i%5==0 then bR=5 end;if bR==10 then bU=b([[%s M %f %f v %d]],bU,aa,bS-5,bR)else bU=b([[%s M %f %f v %d]],bU,aa,bS-2.5,bR)end end;aj[#aj+1]=bU..[["/>]]aj[#aj+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],bT-5,bS+10,bT+5,bS+10,bT,bS+5)if bo then bn="HDG"end;aj[#aj+1]=b([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],bT,bS+25,bQ,bT,bS+35,bn)end;function DrawArtificialHorizon(aj,bh,bg,bi,centerX,centerY,bo)local bL=circleRad;local bW=math.floor(bL*3/5)if bL>0 then local bX=a(bh)local len=0;local bU=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bg,centerX,centerY)if bi==0 then bU=b([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;aj[#aj+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bL-1,centerX,centerY)aj[#aj+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bX-30-bX%5+0.5),a(bX+30+bX%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ab=centerY+-i*5+bh*5;if len==30 then bU=b([[%s M %d %f h %d]],bU,centerX-bW-len,ab,len)if bi>0 then aj[#aj+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bg,centerX,centerY,centerX-bW+10,ab,i)aj[#aj+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bg,centerX,centerY,centerX+bW-10,ab,i)if i==0 or i==180 or i==-180 then aj[#aj+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bg,centerX,centerY,centerX-bW+10,ab,bW*2-20)end else aj[#aj+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-bW+10,ab,i)aj[#aj+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+bW-10,ab,i)end;bU=b([[%s M %d %f h %d]],bU,centerX+bW,ab,len)else bU=b([[%s M %d %f h %d]],bU,centerX-bW-len,ab,len)bU=b([[%s M %d %f h %d]],bU,centerX+bW,ab,len)end end;aj[#aj+1]=bU..[["/>]]local bY="PITCH"if not bo then bY="REL PITCH"end;if bh>90 and bi==0 then bh=90-(bh-90)elseif bh<-90 and bi==0 then bh=-90-(bh+90)end;if bL>200 then if bi>0 then aj[#aj+1]=b([[<g transform="rotate(%f,%d,%d)">]],-bg,centerX,centerY)else aj[#aj+1]=b([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;aj[#aj+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-bW+25,centerY-5,centerX-bW+20,centerY,centerX-bW+25,centerY+5,centerX-bW+50,centerY+4,bX)aj[#aj+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+bW-25,centerY-5,centerX+bW-20,centerY,centerX+bW-25,centerY+5,centerX+bW-30,centerY+4,bX)aj[#aj+1]="</g>"end;aj[#aj+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)if bi==0 and bo then aj[#aj+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bg,centerX,centerY,centerX-bW+10,centerY,bW*2-20)end;aj[#aj+1]="</g>"if bL<200 then aj[#aj+1]=b([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-bL,bY,centerX,centerY-bL+10,bX)end end end;function DrawAltitudeDisplay(aj,bb,bi)if bb<200000 and bi==0 or bb and bi>0 then local bZ=altMeterX;local b_=altMeterY;local c0=78;local c1=19;table.insert(aj,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],bZ-1,b_-4,c0+2,c1+6,bZ+1,b_-1,c0-4,c1))local c2=0;local c3=1;local c4=0;local c5=bb<0;local c6=9;if c5 then c6=0 end;local bb=math.abs(bb)while c2<6 do local c7=11;local c8=16;local c9=9;local ca=14;local b6="altsm"if c2>2 then c8=c8+3;c7=c7+2;ca=ca+2;c9=c9-6;b6="altbig"end;if c5 then b6=b6 .." red"end;local cb=bb/c3%10;local cc=a(cb)local cd=a((cc+1)%10)local ce=c4;if c2==0 then ce=cb-cc;if c5 then ce=1-ce end end;if c5 and(c2==0 or c4~=0)then local cf=cd;cd=cc;cc=cf end;local cg=c8*(ce-1)local ch=cg+c8;local aa=bZ+c9+(6-c2)*c7;local ab=b_+ca;table.insert(aj,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],b6,aa,ab+cg,cd,aa,ab+ch,cc))c2=c2+1;c3=c3*10;if cc==c6 then c4=ce else c4=0 end end;table.insert(aj,[[</g></g>]])end end;function DrawPrograde(aj,bi,velocity,an,centerX,centerY)if an>5 and bi==0 or an>MinAutopilotSpeed then local bL=circleRad;local ci=20;local cj=20;local ck=vec3(velocity)local cl=getRelativePitch(ck)local cm=getRelativeYaw(ck)local cn=-cm/cj*bL;local co=cl/ci*bL;local aa=centerX+cn;local ab=centerY+co;local cp=math.sqrt(cn^2+co^2)if cp<bL then aj[#aj+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',aa,ab)else local bI=math.atan(co,cn)local cq=centerX+bL*math.cos(bI)local cr=centerY+bL*math.sin(bI)aj[#aj+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',cq,cr)end;cl=getRelativePitch(-ck)cm=getRelativeYaw(-ck)cn=-cm/cj*bL;co=cl/ci*bL;aa=centerX+cn;ab=centerY+co;cp=math.sqrt(cn^2+co^2)if bi==0 then if cp<bL then aj[#aj+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',aa,ab)else local bI=math.atan(co,cn)local cq=centerX+bL*math.cos(bI)local cr=centerY+bL*math.sin(bI)aj[#aj+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',cq,cr)end end end end;function DrawWarnings(aj)aj[#aj+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)aj[#aj+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then aj[#aj+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]aj[#aj+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]aj[#aj+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cs=960;local ct=860;local cu=880;local cv=900;local cw=960;local cx=200;local cy=960;if l()==1 and not RemoteHud then ct=135;cu=155;cv=175;cx=115;turnBurnY=95 end;if BrakeIsOn then aj[#aj+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cs,ct)end;if GyroIsOn then aj[#aj+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cs,cy)end;if GearExtended then if HasGear then aj[#aj+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cs,cu)else aj[#aj+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cs,cu)end;aj[#aj+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cs,cv,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if IsBoosting then aj[#aj+1]=b([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],cs,cw+20)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(CoreAltitude-antigrav.getBaseAltitude())<501 then aj[#aj+1]=b([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cs,cx+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))else aj[#aj+1]=b([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cs,cx+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))end end;aj[#aj+1]="</g>"end;function DisplayOrbitScreen(aj)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cz=75;local cA=0;local cB=250;local cC=4;cA=cA+cC;local cD=15;local aa=cz+cB+cz/2+cC;local ab=cA+cB/2+5+cC;local cE,cF,cG,cH;cE=cB/4;cH=0;aj[#aj+1]=[[<g class="pbright txtorb txtmid">]]aj[#aj+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cB+cz*2,cB+cA,cC,cC)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cG=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cE*2)cF=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cG*(1-orbit.eccentricity)cH=cE-orbit.periapsis.altitude/cG-planet.radius/cG;local cI=""if orbit.periapsis.altitude<=0 then cI='redout'end;aj[#aj+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cI,cz+cB/2+cH+cC,cA+cB/2+cC,cE,cF)aj[#aj+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cz+cB/2+cC,cA+cB/2+cC,planet.radius/cG)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then aj[#aj+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],aa-35,ab-5,cz+cB/2+cE+cH,ab-5)aj[#aj+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],aa,ab)ab=ab+cD;aj[#aj+1]=b([[<text x="%f" y="%f">%s</text>]],aa,ab,getDistanceDisplayString(orbit.apoapsis.altitude))ab=ab+cD;aj[#aj+1]=b([[<text x="%f" y="%f">%s</text>]],aa,ab,FormatTimeString(orbit.timeToApoapsis))ab=ab+cD;aj[#aj+1]=b([[<text x="%f" y="%f">%s</text>]],aa,ab,getSpeedDisplayString(orbit.apoapsis.speed))end;ab=cA+cB/2+5+cC;aa=cz-cz/2+10+cC;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then aj[#aj+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],aa+35,ab-5,cz+cB/2-cE+cH,ab-5)aj[#aj+1]=b([[<text x="%f" y="%f">Periapsis</text>]],aa,ab)ab=ab+cD;aj[#aj+1]=b([[<text x="%f" y="%f">%s</text>]],aa,ab,getDistanceDisplayString(orbit.periapsis.altitude))ab=ab+cD;aj[#aj+1]=b([[<text x="%f" y="%f">%s</text>]],aa,ab,FormatTimeString(orbit.timeToPeriapsis))ab=ab+cD;aj[#aj+1]=b([[<text x="%f" y="%f">%s</text>]],aa,ab,getSpeedDisplayString(orbit.periapsis.speed))end;aj[#aj+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cz+cB/2+cC,20+cC,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cJ=orbit.timeToApoapsis/orbit.period*2*math.pi;local cK=cE*math.cos(cJ)local cL=cF*math.sin(cJ)aj[#aj+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cz+cB/2+cK+cH+cC,cA+cB/2+cL+cC)end;aj[#aj+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for S,T in pairs(atlas[0])do if s==nil or T.center.x<s then s=T.center.x end;if t==nil or T.center.x>t then t=T.center.x end;if u==nil or T.center.y<u then u=T.center.y end;if v==nil or T.center.y>v then v=T.center.y end end;GalaxyMapHTML=""local cM=1.1*(t-s)/1920;local cN=1.4*(v-u)/1080;for S,T in pairs(atlas[0])do local aa=960+T.center.x/cM;local ab=540+T.center.y/cN;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..aa..'" cy="'..ab..'" r="'..T.radius/cM*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(T.name,"Moon")and not string.match(T.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..aa.."' y='"..ab+T.radius/cM*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..T.name.."</text>"end end;local bp=vec3(core.getConstructWorldPos())local aa=960+bp.x/cM;local ab=540+bp.y/cN;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..aa..'" cy="'..ab..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..aa.."' y='"..ab-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cM;MapYRatio=cN;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bp=vec3(core.getConstructWorldPos())local aa=960+bp.x/cM;local ab=540+bp.y/cN;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((aa-80)/19.20,(ab-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cO(cP)return type(cP)=='number'end;local function cQ(cP)return type(tonumber(cP))=='number'end;local function cR(cS)return type(cS)=='table'end;local function cT(cU)return type(cU)=='string'end;local function cV(T)return cR(T)and cO(T.x and T.y and T.z)end;local function cW(cX)return cR(cX)and cO(cX.latitude and cX.longitude and cX.altitude and cX.bodyId and cX.systemId)end;local cY=math.pi/180;local cZ=180/math.pi;local c_=1e-10;local bV=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d0='::pos{'..bV..','..bV..','..bV..','..bV..','..bV..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local d1=utils.clamp;local function d2(d3,d4)if d3==0 then return math.abs(d4)<1e-09 end;if d4==0 then return math.abs(d3)<1e-09 end;return math.abs(d3-d4)<math.max(math.abs(d3),math.abs(d4))*c_ end;local function d5(cP)local U=string.gsub(string.reverse(b('%.4f',cP)),'^0*%.?','')return U==''and'0'or string.reverse(U)end;local function d6(d7)if cV(d7)then return b('{x=%.3f,y=%.3f,z=%.3f}',d7.x,d7.y,d7.z)end;if cR(d7)and not getmetatable(d7)then local d8={}local d9=next(d7)if type(d9)=='nil'or d9==1 then d8=d7 else for S,T in pairs(d7)do local bE=d6(T)if type(S)=='number'then table.insert(d8,b('[%s]=%s',S,bE))else table.insert(d8,b('%s=%s',S,bE))end end end;return b('{%s}',table.concat(d8,','))end;if cT(d7)then return b("'%s'",d7:gsub("'",[[\']]))end;return tostring(d7)end;local da={}da.__index=da;da.__tostring=function(d7,db)local dc={}for S in pairs(d7)do table.insert(dc,S)end;table.sort(dc)local d8={}for _,S in ipairs(dc)do local bE=d6(d7[S])if type(S)=='number'then table.insert(d8,b('[%s]=%s',S,bE))else table.insert(d8,b('%s=%s',S,bE))end end;if db then return b('%s%s',db,table.concat(d8,',\n'..db))end;return b('{%s}',table.concat(d8,','))end;da.__eq=function(dd,de)return dd.planetarySystemId==de.planetarySystemId and dd.bodyId==de.bodyId and d2(dd.radius,de.radius)and d2(dd.center.x,de.center.x)and d2(dd.center.y,de.center.y)and d2(dd.center.z,de.center.z)and d2(dd.GM,de.GM)end;local function df(dg,dh,di,dj,dk)assert(cQ(dg),'Argument 1 (planetarySystemId) must be a number:'..type(dg))assert(cQ(dh),'Argument 2 (bodyId) must be a number:'..type(dh))assert(cQ(di),'Argument 3 (radius) must be a number:'..type(di))assert(cR(dj),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dj))assert(cQ(dk),'Argument 5 (GM) must be a number:'..type(dk))return setmetatable({planetarySystemId=tonumber(dg),bodyId=tonumber(dh),radius=tonumber(di),center=vec3(dj),GM=tonumber(dk)},da)end;local dl={}dl.__index=dl;dl.__tostring=function(dm)return b('::pos{%d,%d,%s,%s,%s}',dm.systemId,dm.bodyId,d5(dm.latitude*cZ),d5(dm.longitude*cZ),d5(dm.altitude))end;dl.__eq=function(dd,de)return dd.bodyId==de.bodyId and dd.systemId==de.systemId and d2(dd.latitude,de.latitude)and d2(dd.altitude,de.altitude)and(d2(dd.longitude,de.longitude)or d2(dd.latitude,math.pi/2)or d2(dd.latitude,-math.pi/2))end;local function dn(dp,dh,dq,dr,bb)local dg=dp;if cT(dp)and not dr and not bb and not dh and not dq then dg,dh,dq,dr,bb=string.match(dp,d0)assert(dg,'Argument 1 (position string) is malformed.')else assert(cQ(dg),'Argument 1 (systemId) must be a number:'..type(dg))assert(cQ(dh),'Argument 2 (bodyId) must be a number:'..type(dh))assert(cQ(dq),'Argument 3 (latitude) must be in degrees:'..type(dq))assert(cQ(dr),'Argument 4 (longitude) must be in degrees:'..type(dr))assert(cQ(bb),'Argument 5 (altitude) must be in meters:'..type(bb))end;dg=tonumber(dg)dh=tonumber(dh)dq=tonumber(dq)dr=tonumber(dr)bb=tonumber(bb)if dh==0 then return setmetatable({latitude=dq,longitude=dr,altitude=bb,bodyId=dh,systemId=dg},dl)end;return setmetatable({latitude=cY*d1(dq,-90,90),longitude=cY*(dr%360),altitude=bb,bodyId=dh,systemId=dg},dl)end;local ds={}ds.__index=ds;ds.__tostring=function(d7,db)local dt=db and db..'  'local du={}local dc={}for S in pairs(d7)do table.insert(dc,S)end;table.sort(dc)for _,dv in ipairs(dc)do bdy=d7[dv]local dw=da.__tostring(bdy,dt)if db then table.insert(du,b('[%s]={\n%s\n%s}',dv,dw,db))else table.insert(du,b('  [%s]=%s',dv,dw))end end;if db then return b('\n%s%s%s',db,table.concat(du,',\n'..db),db)end;return b('{\n%s\n}',table.concat(du,',\n'))end;local function dx(dy)local atlas={}local pid;for _,T in pairs(dy)do local dz=T.planetarySystemId;if type(dz)~='number'then error('Invalid planetary system ID: '..tostring(dz))elseif pid and dz~=pid then error('Mismatch planetary system IDs: '..dz..' and '..pid)end;local dA=T.bodyId;if type(dA)~='number'then error('Invalid body ID: '..tostring(dA))elseif atlas[dA]then error('Duplicate body ID: '..tostring(dA))end;setmetatable(T.center,getmetatable(vec3.unit_x))atlas[dA]=setmetatable(T,da)pid=dz end;return setmetatable(atlas,ds)end;PlanetaryReference={}local function dB(dy)return setmetatable({galaxyAtlas=dy or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cS,i)if type(i)=='number'then local system=cS.galaxyAtlas[i]return dx(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d7)return function(cS,S)local dC,nv=next(cS,S)return dC,nv and dx(nv)end,d7.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d7)local dD={}for _,dE in pairs(d7 or{})do local dF=dE:getPlanetarySystemId()local dG=ds.__tostring(dE,'    ')table.insert(dD,b('  [%s]={%s\n  }',dF,dG))end;return b('{\n%s\n}\n',table.concat(dD,',\n'))end;PlanetaryReference.BodyParameters=df;PlanetaryReference.MapPosition=dn;PlanetaryReference.PlanetarySystem=dx;function PlanetaryReference.createBodyParameters(dH,dh,dI,dJ,dK,dL,dM)assert(cQ(dH),'Argument 1 (planetarySystemId) must be a number:'..type(dH))assert(cQ(dh),'Argument 2 (bodyId) must be a number:'..type(dh))assert(cQ(dI),'Argument 3 (surfaceArea) must be a number:'..type(dI))assert(cR(dJ),'Argument 4 (aPosition) must be an array or vec3:'..type(dJ))assert(cR(dK),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dK))assert(cQ(dL),'Argument 6 (altitude) must be in meters:'..type(dL))assert(cQ(dM),'Argument 7 (gravityAtPosition) must be number:'..type(dM))local di=math.sqrt(dI/4/math.pi)local cp=di+dL;local dN=vec3(dJ)+cp*vec3(dK)local dk=dM*cp*cp;return df(dH,dh,di,dN,dk)end;PlanetaryReference.isMapPosition=cW;function PlanetaryReference:getPlanetarySystem(dp)if i==nil then i=0 end;if nv==nil then nv=0 end;local dH=dp;if cW(dp)then dH=dp.systemId end;if type(dH)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=ds then system=dx(system)end;return system end end end;function ds:castIntersections(dO,dP,dQ,dR)local dQ=dQ or function(dS)return 1.05*dS.radius end;local dT={}if dR then for _,i in ipairs(dR)do dT[i]=self[i]end else dR={}for S,dS in pairs(self)do table.insert(dR,S)dT[S]=dS end end;local function dU(dV,dW)local dX=dT[dV].center-dO;local dY=dT[dW].center-dO;return dX:len()<dY:len()end;table.sort(dR,dU)local dZ=dP:normalize()for i,dz in ipairs(dR)do local dS=dT[dz]local d_=dS.center-dO;local di=dQ(dS)local e0=d_:dot(dZ)local e1=e0^2-(d_:len2()-di^2)if e1>=0 then local e2=math.sqrt(e1)local e3=e0+e2;local e4=e0-e2;if e4>0 then return dS,e3,e4 elseif e3>0 then return dS,e3,nil end end end;return nil,nil,nil end;function ds:closestBody(e5)assert(type(e5)=='table','Invalid coordinates.')local e6,dS;local e7=vec3(e5)for _,e8 in pairs(self)do local e9=(e8.center-e7):len2()if not dS or e9<e6 then dS=e8;e6=e9 end end;return dS end;function ds:convertToBodyIdAndWorldCoordinates(dp)local ea=dp;if cT(dp)then ea=dn(dp)end;if ea.bodyId==0 then return 0,vec3(ea.latitude,ea.longitude,ea.altitude)end;local e8=self:getBodyParameters(ea)if e8 then return ea.bodyId,e8:convertToWorldCoordinates(ea)end end;function ds:getBodyParameters(dp)local dh=dp;if cW(dp)then dh=dp.bodyId end;assert(cQ(dh),'Argument 1 (bodyId) must be a number:'..type(dh))return self[dh]end;function ds:getPlanetarySystemId()local _,T=next(self)return T and T.planetarySystemId end;function da:convertToMapPosition(dj)assert(cR(dj),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dj))local eb=vec3(dj)if self.bodyId==0 then return setmetatable({latitude=eb.x,longitude=eb.y,altitude=eb.z,bodyId=0,systemId=self.planetarySystemId},dl)end;local ec=eb-self.center;local cp=ec:len()local bb=cp-self.radius;local dq=0;local dr=0;if not d2(cp,0)then local ed=math.atan(ec.y,ec.x)dr=ed>=0 and ed or 2*math.pi+ed;dq=math.pi/2-math.acos(ec.z/cp)end;return setmetatable({latitude=dq,longitude=dr,altitude=bb,bodyId=self.bodyId,systemId=self.planetarySystemId},dl)end;function da:convertToWorldCoordinates(dp)local ea=cT(dp)and dn(dp)or dp;if ea.bodyId==0 then return vec3(ea.latitude,ea.longitude,ea.altitude)end;assert(cW(ea),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ea.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ea.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ee=math.cos(ea.latitude)return self.center+(self.radius+ea.altitude)*vec3(ee*math.cos(ea.longitude),ee*math.sin(ea.longitude),math.sin(ea.latitude))end;function da:getAltitude(dj)return(vec3(dj)-self.center):len()-self.radius end;function da:getDistance(dj)return(vec3(dj)-self.center):len()end;function da:getGravity(dj)local ef=self.center-vec3(dj)local eg=ef:len2()return self.GM/eg*ef/math.sqrt(eg)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dB(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cT(cU)return type(cU)=='string'end;local function cR(cS)return type(cS)=='table'end;local function d2(d3,d4)if d3==0 then return math.abs(d4)<1e-09 end;if d4==0 then return math.abs(d3)<1e-09 end;return math.abs(d3-d4)<math.max(math.abs(d3),math.abs(d4))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bb)assert(self.body)local cp=bb+self.body.radius;if not d2(cp,0)then local orbit=math.sqrt(self.body.GM/cp)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dp,velocity)assert(self.body)assert(cR(dp)or cT(dp))assert(cR(velocity))local bp=(cT(dp)or PlanetRef.isMapPosition(dp))and self.body:convertToWorldCoordinates(dp)or vec3(dp)local T=vec3(velocity)local eh=bp-self.body.center;local dY=T:len2()local ei=eh:len()local ej=self.body.GM;local ek=((dY-ej/ei)*eh-eh:dot(T)*T)/ej;local d3=ej/(2*ej/ei-dY)local el=ek:len()local dZ=ek:normalize()local em=d3*(1-el)local en=d3*(1+el)local eo=em*dZ+self.body.center;local ep=el<=1 and-en*dZ+self.body.center or nil;local eq=math.sqrt(d3*ej*(1-el*el))local er=ep and 2*math.pi*math.sqrt(d3^3/ej)local es=math.acos(ek:dot(eh)/(el*ei))if eh:dot(T)<0 then es=-(es-2*math.pi)end;local et=math.acos((math.cos(es)+el)/(1+el*math.cos(es)))local eu=et;if eu<0 then eu=eu+2*math.pi end;local ev=eu-el*math.sin(eu)local ew=0;local ex=0;local ey=0;if er~=nil then ew=ev/(2*math.pi/er)ex=er-ew;ey=ex+er/2;if es-math.pi>0 then ex=ew;ey=ex+er/2 end;if ey>er then ey=ey-er end end;return{periapsis={position=eo,speed=eq/em,circularOrbitSpeed=math.sqrt(ej/em),altitude=em-self.body.radius},apoapsis=ep and{position=ep,speed=eq/en,circularOrbitSpeed=math.sqrt(ej/en),altitude=en-self.body.radius},currentVelocity=T,currentPosition=bp,eccentricity=el,period=er,eccentricAnomaly=et,meanAnomaly=ev,timeToPeriapsis=ex,timeToApoapsis=ey}end;local function ez(eA)local e8=PlanetRef.BodyParameters(eA.planetarySystemId,eA.bodyId,eA.radius,eA.center,eA.GM)return setmetatable({body=e8},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ez(...)end})end;function Kinematics()local Kinematic={}local eB=30000000/3600;local eC=eB*eB;local eD=100;local function eE(T)return 1/math.sqrt(1-T*T/eC)end;function Kinematic.computeAccelerationTime(eF,eG,eH)local eI=eB*math.asin(eF/eB)return(eB*math.asin(eH/eB)-eI)/eG end;function Kinematic.computeDistanceAndTime(eF,eH,eJ,eK,eL,eM)eL=eL or 0;eM=eM or 0;local eN=eF<=eH;local eO=eK*(eN and 1 or-1)/eJ;local eP=-eM/eJ;local eQ=eO+eP;if eN and eQ<=0 or not eN and eQ>=0 then return-1,-1 end;local eR,eS=0,0;if eO~=0 and eL>0 then local eI=math.asin(eF/eB)local eT=math.pi*(eO/2+eP)local eU=eO*eL;local eV=eB*math.pi;local T=function(cS)local aD=(eT*cS-eU*math.sin(math.pi*cS/2/eL)+eV*eI)/eV;local eW=math.tan(aD)return eB*eW/math.sqrt(eW*eW+1)end;local eX=eN and function(cU)return cU>=eH end or function(cU)return cU<=eH end;eS=2*eL;if eX(T(eS))then local eY=0;while math.abs(eS-eY)>0.5 do local cS=(eS+eY)/2;if eX(T(cS))then eS=cS else eY=cS end end end;local eZ=eF;local e_=eS/eD;for f0=1,eD do local an=T(f0*e_)eR=eR+(an+eZ)*e_/2;eZ=an end;if eS<2*eL then return eR,eS end;eF=eZ end;local eI=eB*math.asin(eF/eB)local f1=(eB*math.asin(eH/eB)-eI)/eQ;local f2=eC*math.cos(eI/eB)/eQ;local cp=f2-eC*math.cos((eQ*f1+eI)/eB)/eQ;return cp+eR,f1+eS end;function Kinematic.computeTravelTime(eF,eG,cp)if cp==0 then return 0 end;if eG>0 then local eI=eB*math.asin(eF/eB)local f2=eC*math.cos(eI/eB)/eG;return(eB*math.acos(eG*(f2-cp)/eC)-eI)/eG end;assert(eF>0,'Acceleration and initial speed are both zero.')return cp/eF end;function Kinematic.lorentz(T)return eE(T)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(cp)local f3=cp>100000;local U=""if f3 then U=round(cp/1000/200,1).." SU"elseif cp<1000 then U=round(cp,1).." M"else U=round(cp/1000,1).." KM"end;return U end;function getDistanceDisplayString2(cp)local f3=cp>100000;local U=""if f3 then U=round(cp/1000/200,2).." SU"elseif cp<1000 then U=round(cp,2).." M"else U=round(cp/1000,2).." KM"end;return U end;function getSpeedDisplayString(an)return a(round(an*3.6,0)+0.5).." km/h"end;function FormatTimeString(f4)local f5=a(f4/86400)local f6=a(f4/3600)local f7=a(f4/60%60)local f4=a(f4%60)if f4<0 or f6<0 or f7<0 then return"0s"end;if f5>0 then return f5 .."d "..f6 .."h "elseif f6>0 then return f6 .."h "..f7 .."m "elseif f7>0 then return f7 .."m "..f4 .."s"else return f4 .."s"end end;function getMagnitudeInDirection(f8,dP)f8=vec3(f8)dP=vec3(dP):normalize()local U=f8*dP;return U.x+U.y+U.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local f9=AtlasOrdered[AutopilotTargetIndex].index;local fa=atlas[0][f9]if fa.center then AutopilotTargetName=fa.name;AutopilotTargetPlanet=galaxyReference[0][f9]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=fa end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fb=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return fb end;function GetAutopilotTravelTime()if not Autopilot then AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()end;local velocity=core.getWorldVelocity()local fc,fd=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local fe,ff;if not TurnBurn then fe,ff=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else fe,ff=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fg;if not TurnBurn then _,fg=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,fg=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local fh=0;local fi=0;if AutopilotCruising then fi=Kinematic.computeTravelTime(vec3(velocity):len(),0,AutopilotDistance)elseif fe+fc<AutopilotDistance then fh=AutopilotDistance-(fe+fc)fi=Kinematic.computeTravelTime(8333.0556,0,fh)else local fj=(AutopilotDistance-fe)/fc;fc=AutopilotDistance-fe;fd=fd*fj end;if AutopilotBraking then return fg elseif AutopilotCruising then return fi+fg else return fd+ff+fi end end;function GetAutopilotBrakeDistanceAndTime(an)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(an,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(an,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(an)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(an,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local fk=Nav.axisCommandManager:getAxisCommandType(0)local bm="TRAVEL"if fk==1 then bm="CRUISE"end;if Autopilot then bm="AUTOPILOT"end;return bm end;function hoverDetectGround()local fl=-1;if vBooster then fl=vBooster.distance()elseif hover then fl=hover.distance()end;return fl end;function round(bV,fm)local fn=10^(fm or 0)return a(bV*fn+0.5)/fn end;function tablelength(fo)local fp=0;for _ in pairs(fo)do fp=fp+1 end;return fp end;function BeginProfile(fq)ProfileTimeStart=system.getTime()end;function EndProfile(fq)local fr=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fr;ProfileCount=ProfileCount+1;if fr>ProfileTimeMax then ProfileTimeMax=fr end;if fr<ProfileTimeMin then ProfileTimeMin=fr end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fs=ProfileTimeSum;local ft=ProfileTimeSum/ProfileCount;local fu=ProfileTimeMin;local fv=ProfileTimeMax;local fw=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fs,ft,fu,fv,fw))end;Animating=false;Animated=false;UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fx=unit.getAtmosphereDensity()if door and(fx>0 or fx==0 and CoreAltitude<10000)then for _,T in pairs(door)do T.activate()end end;if forcefield and(fx>0 or fx==0 and CoreAltitude<10000)then for _,T in pairs(forcefield)do T.activate()end end;if dbHud then if not WipedDatabank then for S,T in pairs(AutoVariables)do dbHud.setStringValue(T,json.encode(_G[T]))end;for S,T in pairs(SaveableVariables)do dbHud.setStringValue(T,json.encode(_G[T]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fy)if fy=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()Distance=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"MsgTimer=5;unit.setTimer("emergencyWarpTick",5)InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).destination~="Unknown"and json.decode(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif fy=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fz;fz=radar_1.getData():find('identifiedConstructs":%[%]')if HasSpaceRadar and EmergencyWarp then local dz,cp=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if dz~=nil and dz~=""then if math.floor(cp)<EmergencyWarpDistance and NotTriedEmergencyWarp and json.decode(warpdrive.getData()).errorMsg~="PLANET TOO CLOSE"then InEmergencyWarp=true;NotTriedEmergencyWarp=false end end end;if fz==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fz~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fA=radar_1.getEntries()RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fA)local fB={}for S,T in pairs(fA)do if radar_1.hasMatchingTransponder(T)==1 then fB[#fB+1]=T end end;if#fB>0 then local ab=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,ab)for S,T in pairs(fB)do ab=ab+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,ab,radar_1.getConstructName(T))end end elseif radar_1 then local fC;fC=radar_1.getData():find('worksInEnvironment":false')if fC then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end;local aj={}local bm=GetFlightStyle()DrawOdometer(aj,TotalDistanceTrip,TotalDistanceTravelled,bm,FlightTime)checkDamage(aj)LastOdometerOutput=table.concat(aj,"")collectgarbage("collect")elseif fy=="reEmergencyWarp"then if EmergencyWarp then NotTriedEmergencyWarp=true;InEmergencyWarp=true end;unit.stopTimer("reEmergencyWarp")elseif fy=="msgTick"then local aj={}DisplayMessage(aj,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fy=="emergencyWarpTick"then if EmergencyWarp then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;EmergencyWarp=false end;unit.stopTimer("emergencyWarpTick")elseif fy=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fy=="apTick"then local l=Nav.control.isRemoteControlled;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fD=system.getMouseDeltaX()local fE=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fF=velMag>8334;if not fF and LastIsWarping then if not BrakeIsOn then BrakeToggle()end end;LastIsWarping=fF;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local aj={}HUDPrologue(aj)if showHud then updateHud(aj)else DisplayOrbitScreen(aj)DrawWarnings(aj)end;HUDEpilogue(aj)aj[#aj+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(aj,MsgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(aj)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(aj)if screen_1.getMouseState()==1 then CheckButtons()end;aj[#aj+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fD;SimulatedY=SimulatedY+fE end;SetButtonContains()DrawButtons(aj)if not Animating and not Animated then local fG=table.concat(aj,"")aj={}aj[#aj+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aj[#aj+1]=GalaxyMapHTML;aj[#aj+1]=fG;aj[#aj+1]="</body>"Animating=true;aj[#aj+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(aj,"")system.setScreen(content)elseif Animated then local fG=table.concat(aj,"")aj={}aj[#aj+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aj[#aj+1]=GalaxyMapHTML;aj[#aj+1]=fG;aj[#aj+1]="</body>"end;if not Animating then aj[#aj+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fD;SimulatedY=SimulatedY+fE;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="Mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fE,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fD,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(aj)end else SetButtonContains()DrawButtons(aj)end;aj[#aj+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;aj[#aj+1]=[[</svg></body>]]content=table.concat(aj,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;LastEccentricity=orbit.eccentricity;if antigrav and CoreAltitude<200000 then if antigrav.getState()==1 then local velocity=vec3(core.getWorldVelocity())local bG=vec3(core.getWorldVertical())*-1;local bH=velocity.x*bG.x+velocity.y*bG.y+velocity.z*bG.z;local fH=antigrav.getBaseAltitude()if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;local fI=unit.getThrottle()if Nav.axisCommandManager:getAxisCommandType(0)==1 then fI=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)end;local fJ=math.abs(CoreAltitude-fH)if fI>-1 and fI<1 and fJ>10 and fJ<501 and unit.getAtmosphereDensity()<0.01 then if CoreAltitude>antigrav.getBaseAltitude()and AntigravTargetAltitude>CoreAltitude and bH<0 or CoreAltitude<antigrav.getBaseAltitude()and AntigravTargetAltitude<CoreAltitude and bH>0 then BrakeIsOn=true else BrakeIsOn=false end end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end else if AntigravTargetAltitude==nil then desiredBaseAltitude=CoreAltitude else desiredBaseAltitude=AntigravTargetAltitude end end end end end;function script.onFlush()local fK=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fK=math.max(fK,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local fL=utils.clamp(PitchInput+PitchInput2+system.getControlDeviceForwardInput(),-1,1)local fM=utils.clamp(RollInput+RollInput2+system.getControlDeviceYawInput(),-1,1)local fN=utils.clamp(YawInput+YawInput2-system.getControlDeviceLeftRightInput(),-1,1)local fO=BrakeInput;local fP=vec3(core.getWorldVertical())local fQ=vec3(core.getConstructWorldOrientationUp())local fR=vec3(core.getConstructWorldOrientationForward())local fS=vec3(core.getConstructWorldOrientationRight())local fT=vec3(core.getWorldVelocity())local fU=vec3(core.getWorldVelocity()):normalize()local fV=getRoll(fP,fR,fS)local fW=math.abs(fV)local fX=utils.sign(fV)local f=unit.getAtmosphereDensity()local fY=vec3(core.getWorldAngularVelocity())local fZ=fL*pitchSpeedFactor*fS+fM*rollSpeedFactor*fR+fN*yawSpeedFactor*fQ;if fP:len()>0.01 and f>0.0 then local f_=1.0;if autoRoll==true and fW>f_ and fM==0 then local g0=utils.clamp(0,fW-30,fW+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(g0-fV)local g1=rollPID:get()fZ=fZ+g1*fR end;local g2=20.0;if turnAssist==true and fW>g2 and fL==0 and fN==0 then local g3=turnAssistFactor*0.1;local g4=turnAssistFactor*0.025;local g5=(fW-g2)/(180-g2)*180;local g6=0;if g5<90 then g6=g5/90 elseif g5<180 then g6=(180-g5)/90 end;g6=g6*g6;local g7=-fX*g4*(1.0-g6)local g8=g3*g6;fZ=fZ+g8*fS+g7*fQ end end;local g9=1;local ga=0;local gb=1;local gc=fK*(fZ-fY)local gd=vec3(core.getWorldAirFrictionAngularAcceleration())gc=gc-gd;Nav:setEngineTorqueCommand('torque',gc,g9,'airfoil','','',gb)local ge=-fO*(brakeSpeedFactor*fT+brakeFlatFactor*fU)Nav:setEngineForceCommand('brake',ge)local gf=''local gg=vec3()local gh=false;local gi='thrust analog longitudinal'local gj=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gj==axisCommandType.byThrottle then local gk=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gi,axisCommandId.longitudinal)Nav:setEngineForceCommand(gi,gk,g9)elseif gj==axisCommandType.byTargetSpeed then local gk=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gf=gf..' , '..gi;gg=gg+gk;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gh=true end end;local gl='thrust analog lateral'local gm=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gm==axisCommandType.byThrottle then local gn=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gl,axisCommandId.lateral)Nav:setEngineForceCommand(gl,gn,g9)elseif gm==axisCommandType.byTargetSpeed then local go=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gf=gf..' , '..gl;gg=gg+go end;local gp='thrust analog vertical'local gq=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gq==axisCommandType.byThrottle then local gr=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gp,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gp,gr,g9,'airfoil','ground','',gb)else Nav:setEngineForceCommand(gp,vec3(),g9)Nav:setEngineForceCommand('airfoil vertical',gr,g9,'airfoil','','',gb)Nav:setEngineForceCommand('ground vertical',gr,g9,'ground','','',gb)end elseif gq==axisCommandType.byTargetSpeed then local gs=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gf=gf..' , '..gp;gg=gg+gs end;if gg:len()>constants.epsilon then if BrakeInput~=0 or gh or math.abs(fU:dot(fR))<0.95 then gf=gf..', brake'end;Nav:setEngineForceCommand(gf,gg,ga,'','','',gb)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting then local an=vec3(core.getVelocity()):len()local gt=unit.setEngineThrust;local gu=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local fI=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if an*3.6>fI*(1-gu)then gt('rocket_engine',0)elseif IsBoosting then gt('rocket_engine',1)end else local gv=unit.getThrottle()local gw=gv/100;if f==0 then gw=gw*MaxGameVelocity;if an>=gw*(1-gu)then gt('rocket_engine',0)elseif IsBoosting then gt('rocket_engine',1)end else gw=gw*1050/3.6;if an>=gw*(1-gu)then gt('rocket_engine',0)elseif IsBoosting then gt('rocket_engine',1)end end end end end;function script.onUpdate()if not SetupComplete then local _,U=coroutine.resume(beginSetup)if U then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gx)if gx=="gear"then GearExtended=not GearExtended;if GearExtended then BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gx=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gx=="forward"then PitchInput=PitchInput-1 elseif gx=="backward"then PitchInput=PitchInput+1 elseif gx=="left"then RollInput=RollInput-1 elseif gx=="right"then RollInput=RollInput+1 elseif gx=="yawright"then YawInput=YawInput-1 elseif gx=="yawleft"then YawInput=YawInput+1 elseif gx=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gx=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gx=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gx=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gx=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gx=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gx=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif gx=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif gx=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif gx=="option7"then wipeSaveVariables()ToggleView=false elseif gx=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif gx=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gx=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gx=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gx=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gx=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gx=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gx=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gx=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gx=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gx)if gx=="forward"then PitchInput=PitchInput+1 elseif gx=="backward"then PitchInput=PitchInput-1 elseif gx=="left"then RollInput=RollInput+1 elseif gx=="right"then RollInput=RollInput-1 elseif gx=="yawright"then YawInput=YawInput+1 elseif gx=="yawleft"then YawInput=YawInput-1 elseif gx=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gx=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gx=="up"then UpAmount=UpAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gx=="down"then UpAmount=UpAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gx=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gx=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gx=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gx=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gx=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gx)if gx=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gx=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gx=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gx=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(aj,gy)if gy~="empty"then aj[#aj+1]=[[<text class="msg" x="50%%" y="310" >]]for gz in string.gmatch(gy,"([^\n]+)")do aj[#aj+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gz)end;aj[#aj+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a0=system.getTime()local velocity=vec3(core.getWorldVelocity())local bk=vec3(velocity):len()local gA=a0-LastTravelTime;if bk>1.38889 then bk=bk/1000;local gB=bk*(a0-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+gB;TotalDistanceTrip=TotalDistanceTrip+gB end;FlightTime=FlightTime+gA;TotalFlightTime=TotalFlightTime+gA;LastTravelTime=a0 end;function updateMass()local gC=0;for S in pairs(ElementsID)do gC=gC+core.getElementMassById(ElementsID[S])end;return gC end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
